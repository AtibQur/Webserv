// request parser
1. Data lezen in stukken in een while(1) loop 
2. parse de header en check voor \r\n\r\n. Met dit kan je ervan uitgaan dat de request header compleet is
3. Kijk naar de content-length. als het er is, is er een body. De length geeft aan hoeveel data er in de body zit en is een indicatie hoeveel data je al hebt ontvangen
4. Parse de request body (alleen bij post requests). Blijf de data in chuncks lezen, wanneer de binnengekomende length matched met de content-length, is de gehele request compleet.

// cgi and post
pipe aanmaken en de write kant toevoegen aan epoll
wanneer de epoll klaar is kan het een request handelen
1. CGi request binnen
2. de body duppen naar STDIN
3. excev naar een python script dat de inpout naar STDOUT convert
4. van STDOUT naar response naar de client

// juiste response sturen

check content length for post keep looping till no bytes read

alles onder boundary copy naar file naam filename in root

goed!

Kijk of hij loopt tot nieuw line;
if so parse alles erna naar _body 
kijk ff hoe dit werkt met string allocation en max sizes blabla
daarna pars naar file
